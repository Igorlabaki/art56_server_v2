// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String         @id @default(uuid())
  username      String
  password      String
  refresh_token RefreshToken[]
}

model RefreshToken {
  id       String  @id @default(uuid())
  expireIn Int
  userId   String? @unique
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Orcamento {
  id              String         @id @default(cuid())
  tipo            String
  trafegoCanal    String
  conheceEspaco   Boolean        @default(false)
  dataInicio      DateTime
  dataFim         DateTime
  seguranca       Boolean
  limpeza         Boolean
  recepcionista   Boolean
  nome            String
  email           String
  telefone        String
  texto           String         @db.LongText
  convidados      Int
  valorBase       Float
  qtdHorasExtras  Int
  valorHoraExtra  Float
  total           Float
  termosAceito    Boolean        @default(false)
  aprovadoCliente Boolean        @default(false)
  aprovadoAr756   Boolean        @default(false)
  feedback        String?        @db.LongText
  created_at      DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contato         Boolean?
  pago            Boolean?       @default(false) // Indica se o orçamento foi totalmente pago
  valorPago       Float?         @default(0.0) // Armazena o valor pago até o momento
  Data            DateEvent[]
  Despesa         Despesa[]
  Notification    Notification[]
  pagamentos      Pagamentos[]

  @@map("orcamento")
}

model Despesa {
  id            String     @id @default(cuid())
  descricao     String // Descrição da despesa
  valor         Float // Valor da despesa
  dataPagamento DateTime // Data do pagamento da despesa
  tipo          String // Tipo de despesa (Fixa, Variável)
  categoria     String // Categoria da despesa (Manutenção, Serviços, Materiais, etc.)
  recorrente    Boolean // Indica se é uma despesa recorrente ou única
  created_at    DateTime   @default(now()) // Data de criação do registro
  updatedAt     DateTime   @updatedAt
  orcamento     Orcamento? @relation(fields: [orcamentoId], references: [id], onDelete: SetNull) // Permite deletar sem perder o orçamento
  orcamentoId   String? // Pode ser nulo para despesas não vinculadas a eventos específicos

  @@index([orcamentoId])
  @@map("despesa")
}

model Image {
  id             String    @id @default(cuid())
  imageUrl       String    @db.LongText
  area           String
  position       Int
  created_at     DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  responsiveMode String
  tag            String
}

model Text {
  id         String   @id @default(cuid())
  area       String
  titulo     String?
  position   Int      @default(0)
  text       String   @db.LongText
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Values {
  id         String   @id @default(cuid())
  titulo     String
  valor      Int
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Question {
  id         String   @id @default(cuid())
  question   String   @db.LongText
  response   String   @db.LongText
  created_at DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model DateEvent {
  id           String         @id @default(cuid())
  tipo         String
  titulo       String
  dataInicio   DateTime
  dataFim      DateTime
  orcamento    Orcamento?     @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  created_at   DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  orcamentoId  String?
  Notification Notification[]

  @@index([orcamentoId])
}

model Notification {
  id          String           @id @default(uuid())
  orcamentoId String?
  orcamento   Orcamento?       @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  dateEventId String?
  dateEvent   DateEvent?       @relation(fields: [dateEventId], references: [id], onDelete: Cascade)
  content     String
  type        NotificationType
  createdAt   DateTime         @default(now())
  isRead      Boolean          @default(false)

  @@index([orcamentoId])
  @@index([dateEventId])
}

model Pagamentos {
  id            String    @id @default(uuid())
  orcamentoId   String
  orcamento     Orcamento @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  value         Int
  dataPagamento DateTime  @default(now())

  @@index([orcamentoId])
}

enum NotificationType {
  VISITA
  EVENTO
  ALERTA
  ORCAMENTO
}
